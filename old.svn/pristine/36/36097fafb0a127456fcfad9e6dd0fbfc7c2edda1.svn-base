using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using SmartTrapWebApp.Data;
using SmartTrapWebApp.Models.Member;

namespace SmartTrapWebApp.Controllers
{
    [Authorize]
    [Route("api/[controller]")]
    [ApiController]
    public class MemberController : Base.Controller
    {
        private readonly ApplicationDbContext _context;

        public MemberController(
            ApplicationDbContext context,
            ILogger<MemberTableController> logger
            )
        {
            _context = context;
            Logger = logger;
        }
        internal override ILogger Logger { set; get; }

        // GET: api/Member
        [HttpGet]
        public async Task<ActionResult<IEnumerable<MemberModel>>> GetMemberModel()
        {
            return await _context.Members.ToListAsync();
        }

        // GET: api/Member/5
        [HttpGet("{id}")]
        public async Task<ActionResult<MemberModel>> GetMemberModel(string id)
        {
            var memberModel = await _context.Members.FindAsync(id);

            if (memberModel == null)
            {
                return NotFound();
            }

            return memberModel;
        }

        // PUT: api/Member/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for
        // more details see https://aka.ms/RazorPagesCRUD.
        [HttpPut("{id}")]
        public async Task<IActionResult> PutMemberModel(string id, MemberModel memberModel)
        {
            if (id != memberModel.Id)
            {
                return BadRequest();
            }

            _context.Entry(memberModel).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!MemberModelExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // POST: api/Member
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for
        // more details see https://aka.ms/RazorPagesCRUD.
        [HttpPost]
        public async Task<ActionResult<MemberModel>> PostMemberModel(MemberModel memberModel)
        {
            var id = Guid.NewGuid().ToString();
            while (this.MemberModelExists(id))
            {
                id = Guid.NewGuid().ToString();
            }
            memberModel.Id = id;
            _context.Members.Add(memberModel);
            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateException)
            {
                if (MemberModelExists(memberModel.Id))
                {
                    return Conflict();
                }
                else
                {
                    throw;
                }
            }

            return CreatedAtAction("GetMemberModel", new { id = memberModel.Id }, memberModel);
        }

        // DELETE: api/Member/5
        [HttpDelete("{id}")]
        public async Task<ActionResult<MemberModel>> DeleteMemberModel(string id)
        {
            var memberModel = await _context.Members.FindAsync(id);
            if (memberModel == null)
            {
                return NotFound();
            }

            _context.Members.Remove(memberModel);
            await _context.SaveChangesAsync();

            return memberModel;
        }

        private bool MemberModelExists(string id)
        {
            return _context.Members.Any(e => e.Id == id);
        }
    }
}
